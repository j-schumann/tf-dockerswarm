version: '3.8'

services:

  proxy:
    image: traefik:v2.3
    # mode=host required to get the correct client IP without further rules
    # also ports published by docker don't need to be opened in UFW because
    # docker adds the iptable rules automatically
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    deploy:
      placement:
        constraints: [node.role==manager]
    environment:
      - TZ
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - ${CONTAINER_DATA}/traefik:/certificates
    command:
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_MAIL}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # @todo disable?
      - --log
      - --accesslog=true
    networks:
      - traefik-net

  # this is the server we use for reading & writing from applications
  # it is placed on the swarm master for fast filesystem access
  # instead of relying on GlusterFS
  dbmaster:
    image: bitnami/mariadb:latest
    deploy:
      replicas: 1
      placement:
        constraints: [node.role==manager]
    volumes:
      # performance result writing 100000 rows:
      # on lokal disk on master: 1.9-2.1s (random numbers), 1.6s (static strings)
      # on local disk on CEPH master: [not tested], 2.0-4.1s
      # on storage mount on master: ~2.0s, 1.7s
      # on storage mount on CPX master: [not tested], 2.1-2.9s
      # on storage mount on CEPH master: [not tested], 2.0-2.5s
      # on gluster mount on master: 2.2-2.5s, 1.7-2.7s
      # on gluster mount on node: 2.2-2.8s, 3.4-4.6s
      # on dedicated root with raid0 SATA: [not tested], 1.37s (myisam) / 1.4-1.8s (innodb)
      - ${STORAGE_DIR}/mariadb:/bitnami/mariadb # decided for storage mount so the master can easily be recreated without importing data
      - ${CONTAINER_DATA}/mariadb/config/my_custom.cnf:/opt/bitnami/mariadb/conf/my_custom.cnf:ro
    environment:
      - MARIADB_REPLICATION_MODE=master
      - MARIADB_REPLICATION_USER=repl_user
      - MARIADB_REPLICATION_PASSWORD=repl_pw
      - MARIADB_USER
      - MARIADB_PASSWORD
      - MARIADB_DATABASE
      - MARIADB_ROOT_PASSWORD
    networks:
      - traefik-net
    healthcheck:
      test: ['CMD', '/opt/bitnami/scripts/mariadb/healthcheck.sh']
      interval: 15s
      timeout: 5s
      retries: 6

  # the slave is only used for backups so that using mysqldump does not
  # lock tables too long for the applications
  dbslave:
    image: bitnami/mariadb:latest
    deploy:
      replicas: 1
      placement:
        constraints: [node.role==worker]
    volumes:
      # the replicated databases don't need to be stored on the
      # network filesystem. This will cause the slave to read the
      # whole binlog again when the swarm switches it to another node.
      - /opt/container-data/dbslave:/bitnami/mariadb
      - ${CONTAINER_DATA}/mariadb/config/my_custom.cnf:/opt/bitnami/mariadb/conf/my_custom.cnf:ro
    environment:
      - MARIADB_REPLICATION_MODE=slave
      - MARIADB_REPLICATION_USER=repl_user
      - MARIADB_REPLICATION_PASSWORD=repl_pw
      - MARIADB_MASTER_HOST=dbmaster
      # used to access the master, also set as local root pw
      - MARIADB_MASTER_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    networks:
      - traefik-net
    healthcheck:
      test: ['CMD', '/opt/bitnami/scripts/mariadb/healthcheck.sh']
      interval: 15s
      timeout: 5s
      retries: 6

  webserver:
    image: nginx
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==worker]
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.http.routers.website-http.rule=Host(`test.vrok.de`)
        - traefik.http.routers.website-http.entrypoints=http
        - traefik.http.routers.website-http.middlewares=website-redirect
        - traefik.http.middlewares.website-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.website-redirect.redirectscheme.permanent=true
        - traefik.http.routers.website-https.rule=Host(`test.vrok.de`)
        - traefik.http.routers.website-https.entrypoints=https
        - traefik.http.routers.website-https.tls=true
        - traefik.http.routers.website-https.tls.certresolver=le
        - traefik.http.routers.website-https.service=website-service
        - traefik.http.services.website-service.loadbalancer.server.port=80
    volumes:
#      - /var/www/html/index.html:/usr/share/nginx/html/index.html
      - /var/www/html:/var/www/html
      - ${CONTAINER_DATA}/nginx/site.conf:/etc/nginx/conf.d/site.conf
    networks:
      - traefik-net

  appservice:
    image: php:7-fpm
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==worker]
    volumes:
      - /var/www/html:/var/www/html
    networks:
      - traefik-net

  adminer:
    image: adminer:4.7
    deploy:
      replicas: 1
      placement:
        constraints: [node.role==worker]
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.http.routers.adminer-http.rule=Host(`adminer.test.vrok.de`)
        - traefik.http.routers.adminer-http.entrypoints=http
        - traefik.http.routers.adminer-http.middlewares=adminer-redirect
        - traefik.http.middlewares.adminer-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.adminer-redirect.redirectscheme.permanent=true
        - traefik.http.routers.adminer-https.rule=Host(`adminer.test.vrok.de`)
        - traefik.http.routers.adminer-https.entrypoints=https
        - traefik.http.routers.adminer-https.tls=true
        - traefik.http.routers.adminer-https.tls.certresolver=le
        - traefik.http.routers.adminer-https.service=adminer-service
        - traefik.http.services.adminer-service.loadbalancer.server.port=8080
        - traefik.http.routers.adminer-https.middlewares=adminer-auth
        # apt-get install apache2-utils
        # echo 
        - "traefik.http.middlewares.adminer-auth.basicauth.users=${BASIC_CREDENTIALS}"
    environment:
      - ADMINER_DEFAULT_SERVER=dbmaster
    networks:
      - traefik-net

networks:
  traefik-net:
    external: true
